{"ast":null,"code":"import React,{Component}from'react';import Node from'./Node/Node';import{dijkstra,getNodesInShortestPathOrder}from'../algorithms/dijkstra';import'./PathfindingVisualizer.css';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const START_NODE_ROW=5;const START_NODE_COL=15;const FINISH_NODE_ROW=10;const FINISH_NODE_COL=35;export default class PathfindingVisualizer extends Component{constructor(){super();this.state={grid:[],mouseIsPressed:false};}componentDidMount(){const grid=getInitialGrid();this.setState({grid});}handleMouseDown(row,col){const newGrid=getNewGridWithWallToggled(this.state.grid,row,col);this.setState({grid:newGrid,mouseIsPressed:true});}handleMouseEnter(row,col){if(!this.state.mouseIsPressed)return;const newGrid=getNewGridWithWallToggled(this.state.grid,row,col);this.setState({grid:newGrid});}handleMouseUp(){this.setState({mouseIsPressed:false});}animateDijkstra(visitedNodesInOrder,nodesInShortestPathOrder){for(let i=0;i<=visitedNodesInOrder.length;i++){if(i===visitedNodesInOrder.length){setTimeout(()=>{this.animateShortestPath(nodesInShortestPathOrder);},10*i);return;}setTimeout(()=>{const node=visitedNodesInOrder[i];document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className='node node-visited';},10*i);}}animateShortestPath(nodesInShortestPathOrder){for(let i=0;i<nodesInShortestPathOrder.length;i++){setTimeout(()=>{const node=nodesInShortestPathOrder[i];document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className='node node-shortest-path';},50*i);}}visualizeDijkstra(){const{grid}=this.state;const startNode=grid[START_NODE_ROW][START_NODE_COL];const finishNode=grid[FINISH_NODE_ROW][FINISH_NODE_COL];const visitedNodesInOrder=dijkstra(grid,startNode,finishNode);const nodesInShortestPathOrder=getNodesInShortestPathOrder(finishNode);this.animateDijkstra(visitedNodesInOrder,nodesInShortestPathOrder);}render(){const{grid,mouseIsPressed}=this.state;return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"visualize-section\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"visualize-button\",onClick:()=>this.visualizeDijkstra(),children:\"Visualize Dijkstra's Algorithm\"}),/*#__PURE__*/_jsx(\"h2\",{className:\"app-subheading\",children:\"Explore the Magic of Pathfinding Algorithms\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"grid\",children:grid.map((row,rowIdx)=>{return/*#__PURE__*/_jsx(\"div\",{children:row.map((node,nodeIdx)=>{const{row,col,isFinish,isStart,isWall}=node;return/*#__PURE__*/_jsx(Node,{col:col,isFinish:isFinish,isStart:isStart,isWall:isWall,mouseIsPressed:mouseIsPressed,onMouseDown:(row,col)=>this.handleMouseDown(row,col),onMouseEnter:(row,col)=>this.handleMouseEnter(row,col),onMouseUp:()=>this.handleMouseUp(),row:row},nodeIdx);})},rowIdx);})})]});}}const getInitialGrid=()=>{const grid=[];for(let row=0;row<15;row++){const currentRow=[];for(let col=0;col<50;col++){currentRow.push(createNode(col,row));}grid.push(currentRow);}return grid;};const createNode=(col,row)=>{return{col,row,isStart:row===START_NODE_ROW&&col===START_NODE_COL,isFinish:row===FINISH_NODE_ROW&&col===FINISH_NODE_COL,distance:Infinity,isVisited:false,isWall:false,previousNode:null};};const getNewGridWithWallToggled=(grid,row,col)=>{const newGrid=grid.slice();const node=newGrid[row][col];const newNode={...node,isWall:!node.isWall};newGrid[row][col]=newNode;return newGrid;};","map":{"version":3,"names":["React","Component","Node","dijkstra","getNodesInShortestPathOrder","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","constructor","state","grid","mouseIsPressed","componentDidMount","getInitialGrid","setState","handleMouseDown","row","col","newGrid","getNewGridWithWallToggled","handleMouseEnter","handleMouseUp","animateDijkstra","visitedNodesInOrder","nodesInShortestPathOrder","i","length","setTimeout","animateShortestPath","node","document","getElementById","concat","className","visualizeDijkstra","startNode","finishNode","render","children","onClick","map","rowIdx","nodeIdx","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","currentRow","push","createNode","distance","Infinity","isVisited","previousNode","slice","newNode"],"sources":["/Users/harshvaidh/Desktop/PathVisualizer/src/PathfindingVisualizer/PathfindingVisualizer.jsx"],"sourcesContent":["import React, {Component} from 'react';\nimport Node from './Node/Node';\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\n\nimport './PathfindingVisualizer.css';\n\nconst START_NODE_ROW = 5;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({grid});\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid, mouseIsPressed: true});\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid});\n  }\n\n  handleMouseUp() {\n    this.setState({mouseIsPressed: false});\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-shortest-path';\n      }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const {grid} = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  render() {\n    const {grid, mouseIsPressed} = this.state;\n\n    return (\n      <>\n       <div className=\"visualize-section\">\n  <button className=\"visualize-button\" onClick={() => this.visualizeDijkstra()}>\n    Visualize Dijkstra's Algorithm\n  </button>\n  <h2 className=\"app-subheading\">Explore the Magic of Pathfinding Algorithms</h2>\n</div>\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const {row, col, isFinish, isStart, isWall} = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      row={row}></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 15; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAGC,SAAS,KAAO,OAAO,CACtC,MAAO,CAAAC,IAAI,KAAM,aAAa,CAC9B,OAAQC,QAAQ,CAAEC,2BAA2B,KAAO,wBAAwB,CAE5E,MAAO,6BAA6B,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,CAAAC,QAAA,IAAAC,SAAA,yBAErC,KAAM,CAAAC,cAAc,CAAG,CAAC,CACxB,KAAM,CAAAC,cAAc,CAAG,EAAE,CACzB,KAAM,CAAAC,eAAe,CAAG,EAAE,CAC1B,KAAM,CAAAC,eAAe,CAAG,EAAE,CAE1B,cAAe,MAAM,CAAAC,qBAAqB,QAAS,CAAAd,SAAU,CAC3De,WAAWA,CAAA,CAAG,CACZ,KAAK,CAAC,CAAC,CACP,IAAI,CAACC,KAAK,CAAG,CACXC,IAAI,CAAE,EAAE,CACRC,cAAc,CAAE,KAClB,CAAC,CACH,CAEAC,iBAAiBA,CAAA,CAAG,CAClB,KAAM,CAAAF,IAAI,CAAGG,cAAc,CAAC,CAAC,CAC7B,IAAI,CAACC,QAAQ,CAAC,CAACJ,IAAI,CAAC,CAAC,CACvB,CAEAK,eAAeA,CAACC,GAAG,CAAEC,GAAG,CAAE,CACxB,KAAM,CAAAC,OAAO,CAAGC,yBAAyB,CAAC,IAAI,CAACV,KAAK,CAACC,IAAI,CAAEM,GAAG,CAAEC,GAAG,CAAC,CACpE,IAAI,CAACH,QAAQ,CAAC,CAACJ,IAAI,CAAEQ,OAAO,CAAEP,cAAc,CAAE,IAAI,CAAC,CAAC,CACtD,CAEAS,gBAAgBA,CAACJ,GAAG,CAAEC,GAAG,CAAE,CACzB,GAAI,CAAC,IAAI,CAACR,KAAK,CAACE,cAAc,CAAE,OAChC,KAAM,CAAAO,OAAO,CAAGC,yBAAyB,CAAC,IAAI,CAACV,KAAK,CAACC,IAAI,CAAEM,GAAG,CAAEC,GAAG,CAAC,CACpE,IAAI,CAACH,QAAQ,CAAC,CAACJ,IAAI,CAAEQ,OAAO,CAAC,CAAC,CAChC,CAEAG,aAAaA,CAAA,CAAG,CACd,IAAI,CAACP,QAAQ,CAAC,CAACH,cAAc,CAAE,KAAK,CAAC,CAAC,CACxC,CAEAW,eAAeA,CAACC,mBAAmB,CAAEC,wBAAwB,CAAE,CAC7D,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAIF,mBAAmB,CAACG,MAAM,CAAED,CAAC,EAAE,CAAE,CACpD,GAAIA,CAAC,GAAKF,mBAAmB,CAACG,MAAM,CAAE,CACpCC,UAAU,CAAC,IAAM,CACf,IAAI,CAACC,mBAAmB,CAACJ,wBAAwB,CAAC,CACpD,CAAC,CAAE,EAAE,CAAGC,CAAC,CAAC,CACV,OACF,CACAE,UAAU,CAAC,IAAM,CACf,KAAM,CAAAE,IAAI,CAAGN,mBAAmB,CAACE,CAAC,CAAC,CACnCK,QAAQ,CAACC,cAAc,SAAAC,MAAA,CAASH,IAAI,CAACb,GAAG,MAAAgB,MAAA,CAAIH,IAAI,CAACZ,GAAG,CAAE,CAAC,CAACgB,SAAS,CAC/D,mBAAmB,CACvB,CAAC,CAAE,EAAE,CAAGR,CAAC,CAAC,CACZ,CACF,CAEAG,mBAAmBA,CAACJ,wBAAwB,CAAE,CAC5C,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGD,wBAAwB,CAACE,MAAM,CAAED,CAAC,EAAE,CAAE,CACxDE,UAAU,CAAC,IAAM,CACf,KAAM,CAAAE,IAAI,CAAGL,wBAAwB,CAACC,CAAC,CAAC,CACxCK,QAAQ,CAACC,cAAc,SAAAC,MAAA,CAASH,IAAI,CAACb,GAAG,MAAAgB,MAAA,CAAIH,IAAI,CAACZ,GAAG,CAAE,CAAC,CAACgB,SAAS,CAC/D,yBAAyB,CAC7B,CAAC,CAAE,EAAE,CAAGR,CAAC,CAAC,CACZ,CACF,CAEAS,iBAAiBA,CAAA,CAAG,CAClB,KAAM,CAACxB,IAAI,CAAC,CAAG,IAAI,CAACD,KAAK,CACzB,KAAM,CAAA0B,SAAS,CAAGzB,IAAI,CAACP,cAAc,CAAC,CAACC,cAAc,CAAC,CACtD,KAAM,CAAAgC,UAAU,CAAG1B,IAAI,CAACL,eAAe,CAAC,CAACC,eAAe,CAAC,CACzD,KAAM,CAAAiB,mBAAmB,CAAG5B,QAAQ,CAACe,IAAI,CAAEyB,SAAS,CAAEC,UAAU,CAAC,CACjE,KAAM,CAAAZ,wBAAwB,CAAG5B,2BAA2B,CAACwC,UAAU,CAAC,CACxE,IAAI,CAACd,eAAe,CAACC,mBAAmB,CAAEC,wBAAwB,CAAC,CACrE,CAEAa,MAAMA,CAAA,CAAG,CACP,KAAM,CAAC3B,IAAI,CAAEC,cAAc,CAAC,CAAG,IAAI,CAACF,KAAK,CAEzC,mBACET,KAAA,CAAAE,SAAA,EAAAoC,QAAA,eACCtC,KAAA,QAAKiC,SAAS,CAAC,mBAAmB,CAAAK,QAAA,eACvCxC,IAAA,WAAQmC,SAAS,CAAC,kBAAkB,CAACM,OAAO,CAAEA,CAAA,GAAM,IAAI,CAACL,iBAAiB,CAAC,CAAE,CAAAI,QAAA,CAAC,gCAE9E,CAAQ,CAAC,cACTxC,IAAA,OAAImC,SAAS,CAAC,gBAAgB,CAAAK,QAAA,CAAC,6CAA2C,CAAI,CAAC,EAC5E,CAAC,cACExC,IAAA,QAAKmC,SAAS,CAAC,MAAM,CAAAK,QAAA,CAClB5B,IAAI,CAAC8B,GAAG,CAAC,CAACxB,GAAG,CAAEyB,MAAM,GAAK,CACzB,mBACE3C,IAAA,QAAAwC,QAAA,CACGtB,GAAG,CAACwB,GAAG,CAAC,CAACX,IAAI,CAAEa,OAAO,GAAK,CAC1B,KAAM,CAAC1B,GAAG,CAAEC,GAAG,CAAE0B,QAAQ,CAAEC,OAAO,CAAEC,MAAM,CAAC,CAAGhB,IAAI,CAClD,mBACE/B,IAAA,CAACJ,IAAI,EAEHuB,GAAG,CAAEA,GAAI,CACT0B,QAAQ,CAAEA,QAAS,CACnBC,OAAO,CAAEA,OAAQ,CACjBC,MAAM,CAAEA,MAAO,CACflC,cAAc,CAAEA,cAAe,CAC/BmC,WAAW,CAAEA,CAAC9B,GAAG,CAAEC,GAAG,GAAK,IAAI,CAACF,eAAe,CAACC,GAAG,CAAEC,GAAG,CAAE,CAC1D8B,YAAY,CAAEA,CAAC/B,GAAG,CAAEC,GAAG,GACrB,IAAI,CAACG,gBAAgB,CAACJ,GAAG,CAAEC,GAAG,CAC/B,CACD+B,SAAS,CAAEA,CAAA,GAAM,IAAI,CAAC3B,aAAa,CAAC,CAAE,CACtCL,GAAG,CAAEA,GAAI,EAXJ0B,OAWW,CAAC,CAEvB,CAAC,CAAC,EAlBMD,MAmBL,CAAC,CAEV,CAAC,CAAC,CACC,CAAC,EACN,CAAC,CAEP,CACF,CAEA,KAAM,CAAA5B,cAAc,CAAGA,CAAA,GAAM,CAC3B,KAAM,CAAAH,IAAI,CAAG,EAAE,CACf,IAAK,GAAI,CAAAM,GAAG,CAAG,CAAC,CAAEA,GAAG,CAAG,EAAE,CAAEA,GAAG,EAAE,CAAE,CACjC,KAAM,CAAAiC,UAAU,CAAG,EAAE,CACrB,IAAK,GAAI,CAAAhC,GAAG,CAAG,CAAC,CAAEA,GAAG,CAAG,EAAE,CAAEA,GAAG,EAAE,CAAE,CACjCgC,UAAU,CAACC,IAAI,CAACC,UAAU,CAAClC,GAAG,CAAED,GAAG,CAAC,CAAC,CACvC,CACAN,IAAI,CAACwC,IAAI,CAACD,UAAU,CAAC,CACvB,CACA,MAAO,CAAAvC,IAAI,CACb,CAAC,CAED,KAAM,CAAAyC,UAAU,CAAGA,CAAClC,GAAG,CAAED,GAAG,GAAK,CAC/B,MAAO,CACLC,GAAG,CACHD,GAAG,CACH4B,OAAO,CAAE5B,GAAG,GAAKb,cAAc,EAAIc,GAAG,GAAKb,cAAc,CACzDuC,QAAQ,CAAE3B,GAAG,GAAKX,eAAe,EAAIY,GAAG,GAAKX,eAAe,CAC5D8C,QAAQ,CAAEC,QAAQ,CAClBC,SAAS,CAAE,KAAK,CAChBT,MAAM,CAAE,KAAK,CACbU,YAAY,CAAE,IAChB,CAAC,CACH,CAAC,CAED,KAAM,CAAApC,yBAAyB,CAAGA,CAACT,IAAI,CAAEM,GAAG,CAAEC,GAAG,GAAK,CACpD,KAAM,CAAAC,OAAO,CAAGR,IAAI,CAAC8C,KAAK,CAAC,CAAC,CAC5B,KAAM,CAAA3B,IAAI,CAAGX,OAAO,CAACF,GAAG,CAAC,CAACC,GAAG,CAAC,CAC9B,KAAM,CAAAwC,OAAO,CAAG,CACd,GAAG5B,IAAI,CACPgB,MAAM,CAAE,CAAChB,IAAI,CAACgB,MAChB,CAAC,CACD3B,OAAO,CAACF,GAAG,CAAC,CAACC,GAAG,CAAC,CAAGwC,OAAO,CAC3B,MAAO,CAAAvC,OAAO,CAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}